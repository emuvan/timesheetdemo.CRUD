@using timesheetdemo.CRUD.Model
@inject timesheetdemo.CRUD.Services.ICustomerService customerService
@inject MudBlazor.ISnackbar snackBar

@page "/"

<h1>Hello, user!</h1>

Welcome to your new timesheet app.

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Timesheet</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="timesheet.Label" Label="Label" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="timesheet.CandidateName" Label="Candidate Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="timesheet.ClientCompanyName" Label="Client Company Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="timesheet.GoowidId" Label="Goowid Id" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudDatePicker @bind-Text="timesheet.StartDate" Label="Start Date" Variant="Variant.Text" Margin="Margin.Normal"></MudDatePicker>
        <MudDatePicker @bind-Text="timesheet.EndDate" Label="End Date" Variant="Variant.Text" Margin="Margin.Normal"></MudDatePicker>
        <MudTextField @bind-Value="timesheet.Units" Label="Units" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="timesheet.RatePerUnit" Label="Rate Per Unit" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="timesheet.TotalAmount" Label="Total Amount" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="timesheet.Timestamp" Label="Time stamp" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>

        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Timesheet</MudButton>
    </MudCardContent>
</MudCard>
<br />
<MudTable Elevation="25" Items="GetTimeSheets()" Filter="new Func<TimeSheet, bool>(Search)" @bind-customer="timesheet">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Timesheets</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for timesheet..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Label</MudTh>
        <MudTh>Candidate Name</MudTh>
        <MudTh>Client Company Name</MudTh>
        <MudTh>Goowid Id</MudTh>
        <MudTh>Start Date</MudTh>
        <MudTh>End Date</MudTh>
        <MudTh>Units</MudTh>
        <MudTh>Rate Per Unit</MudTh>
        <MudTh>Total Amount</MudTh>
        <MudTh>Time stamp</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Label">@context.Id</MudTd>
        <MudTd DataLabel="Label">@context.Label</MudTd>
        <MudTd DataLabel="CandidateName">@context.CandidateName</MudTd>
        <MudTd DataLabel="ClientCompanyName">@context.ClientCompanyName</MudTd>
        <MudTd DataLabel="GoowidId">@context.GoowidId</MudTd>
        <MudTd DataLabel="StartDate">@context.StartDate</MudTd>
        <MudTd DataLabel="EndDate">@context.EndDate</MudTd>
        <MudTd DataLabel="Units">@context.Units</MudTd>
        <MudTd DataLabel="RatePerUnit">@context.RatePerUnit</MudTd>
        <MudTd DataLabel="TotalAmount">@context.TotalAmount</MudTd>
        <MudTd DataLabel="Timestamp">@context.Timestamp</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code{
    private string searchString = "";
    private TimeSheet timesheet = new TimeSheet();
    private List<TimeSheet> timesheets = new List<TimeSheet>();
    protected override async Task OnInitializedAsync()
    {
        GetTimeSheets();
    }
    private List<TimeSheet> GetTimeSheets()
    {
        return timesheets;
    }
    private bool Search(TimeSheet timesheet)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (timesheet.CandidateName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || timesheet.ClientCompanyName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || timesheet.GoowidId.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || timesheet.Label.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || timesheet.StartDate.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || timesheet.EndDate.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }
    private void Save()
    {
        // first new record
        if(timesheets.Count == 0)
        {
            timesheet.Id = 1;
            timesheets.Add(timesheet);
        }
        // new record
        else if(timesheet.Id == 0)
        {
            timesheet.Id = timesheets.Max(x => x.Id) + 1;
            timesheets.Add(timesheet);
        }
        // update
        else
        {
            TimeSheet timesheetToUpdate = timesheets.Where(x => x.Id == timesheet.Id).First();
            timesheets.Remove(timesheetToUpdate);


            timesheets.Add(timesheetToUpdate);
        };

        timesheet = new TimeSheet();

        snackBar.Add("Timesheet Saved.", Severity.Success);
        GetTimeSheets();
    }
    private void Edit(int id)
    {
        timesheet = timesheets.FirstOrDefault(c => c.Id == id);
    }
    private void Delete(int id)
    {
        timesheet = timesheets.First(c => c.Id == id);
        timesheets.Remove(timesheet);

        timesheet = new TimeSheet();

        snackBar.Add("timesheet Deleted.", Severity.Success);
        GetTimeSheets();
    }
}